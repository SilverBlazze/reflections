1) What happens when you initialize a repository? Why do you need to do it?
   
   Git creates a .git folder which contains information of the files in the current directory.
   You need to do it in order to track changes done in your repository, and being able to
   perform different operations on the files and directories.
   
2) How is the staging area different from the working directory and the repository? What value
   do you think it offers?
   
   It's different in the sense that the files that have been added to it have not yet been
   commited, thus not added to the repository yet. 
   It's like a temporal storage location that gives you more control over how the commits
   are going to be performed. It allows you to perform certain operations before commiting.
   
3) How can you use the staging area to make sure you have one commit per logical change?
   
   By adding just the files whose changes are related and make a commit separately from
   the others. This way, even though several changes may have occurred, you have the control
   over which ones are part of the same commit.
   
4) What are some situations when branches would be helpful in keeping your history organized?
   How would branches help?
   
   When adding experimental changes to the project is helpful to use branches because that
   way changes do no affect the official version of the program, and only when you're
   sure that you want those changes is when they're going to be merged with the master
   branch.
   
   It gives you flexibility to try new features without affecting the main branch of
   development and leaves a history of those try outs.
   
5) How do the diagrams help you visualize the branch structure?
   
   Because you are able to see in a graphical manner the state of the master branch and any
   of its sub-branches and where they have originated.
   
6) What is the result of merging two branches together? Why do we represent it in the
   diagram the way we do?
   
   When two branches are merged the changes done by each one are combined, and its represented
   in the diagram that way because the resulting commit is a combination of the 2 parent commits.

7) What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
   
   With Git's automatic merging we can save a lot of time when there's not conflicts, and even
   if there are conflicts, Git will automatically tell us where they are so we can focus on
   solving them.
   By doing merges manually you don't take the advantage that Git offers when there are not
   conflicts and you have to manually compare where both versions of the files differ.
   