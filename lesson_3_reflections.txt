1) When would you want to use a remote repository rather than keeping all your work local?

   When working with several people in a project so that all files can easily be shared
   and any changes made are visible to everyone.
   
2) Why might you want to always pull changes manually rather than having Git automatically
   stay up-to-date with your remote repository?
   
   To have more control over when to merge the changes done in the remote repository.
   
3) Describe the differences between forks, clones, and branches. When would you use one
   instead of another?

   With fork you clone a repository directly on Github, without having to first make a 
   local copy. A reference to the forked repository is saved. 
   This way you and other people can work in a project without having to modify the
   original.
   
   With clone you are downloading a repository to your computer, useful to allow several
   people to work in the same project.
   
   With branching you are creating a separte path of development so that any changes
   won't affect previous work in the master branch, it is useful to try new features or
   attemp to solve bugs.
   
4) What is the benefit of having a copy of the last known state of the remote stored
   locally?
   
   Being able to record how many new commits have been made since the last time we fetched
   data.
   
5) How would you collaborate without using Git or GitHub? What would be easier and what
   would be harder?
   
   Storing the project files in a place that can be accessed by the team, and every time
   a change was made, a file would be edited describing the change and which files got
   updated.
   
   It will be more work because you will have to manually update the files, but before
   doing so, make sure that other people haven't updated them in the meantime.
   This would cause people to spend more time talking to each other before updating any
   file and would impact efficiency.
   
   Git facilitates the process of working together, making it much easier to update files
   and knowing when changes have been made, plus the added beneffit of keeping a history
   of the project which lets you go back in time if necessary, and the possibility of
   making experimental changes by working in separate branches, without affecting the
   work of others.
   
6) When would you want to make changes in a separate branch rather than directly in
   master? What benefits does each approach have?
   
   Working in the master branch has the benefit of a less complicated workflow, but you
   also risk breaking code or missing updates from other people working on it.
   
   If you use a separate branch to work, you can try experimental features or debug,
   without worrying about breaking any code. And when changes are ready to be 
   incorporated into the master branch, other people can be notified allowing them to 
   review your changes and merging only when everything is alright.